<robot xmlns:xacro="http://www.ros.org/wiki/xacro"  name="robot">


    <!-- Variables -->
    <xacro:property name="thikness" value="0.3" />
    <xacro:property name="lenght" value="2" />
    <xacro:property name="leg_len" value="1.5" />
    <xacro:property name="foot_len" value="0.7" />

    <!-- Specify some colours -->

    <material name="white">
        <color rgba="1 1 1 1"/>
    </material>

    <material name="orange">
        <color rgba="1 0.3 0.1 1"/>
    </material>

    <material name="blue">
        <color rgba="0.2 0.2 1 1"/>
    </material>



    <!-- Specify some standard inertial calculations https://en.wikipedia.org/wiki/List_of_moments_of_inertia -->
    <!-- These make use of xacro's mathematical functionality -->

    <xacro:macro name="inertial_sphere" params="mass radius *origin">
        <inertial>
            <xacro:insert_block name="origin"/>
            <mass value="${mass}" />
            <inertia ixx="${(2/5) * mass * (radius*radius)}" ixy="0.0" ixz="0.0"
                    iyy="${(2/5) * mass * (radius*radius)}" iyz="0.0"
                    izz="${(2/5) * mass * (radius*radius)}" />
        </inertial>
    </xacro:macro>  


    <xacro:macro name="inertial_box" params="mass x y z *origin">
        <inertial>
            <xacro:insert_block name="origin"/>
            <mass value="${mass}" />
            <inertia ixx="${(1/12) * mass * (y*y+z*z)}" ixy="0.0" ixz="0.0"
                    iyy="${(1/12) * mass * (x*x+z*z)}" iyz="0.0"
                    izz="${(1/12) * mass * (x*x+y*y)}" />
        </inertial>
    </xacro:macro>


    <xacro:macro name="inertial_cylinder" params="mass length radius *origin">
        <inertial>
            <xacro:insert_block name="origin"/>
            <mass value="${mass}" />
            <inertia ixx="${(1/12) * mass * (3*radius*radius + length*length)}" ixy="0.0" ixz="0.0"
                    iyy="${(1/12) * mass * (3*radius*radius + length*length)}" iyz="0.0"
                    izz="${(1/2) * mass * (radius*radius)}" />
        </inertial>
    </xacro:macro>


    <!-- base_link is a large rectangular plate. Some things to note: -->
    <!-- - We set the visual origin Z to half the box height, so that the link origin sits at the bottom of the box -->
    <!-- - We set the collision to be identical to the visual -->
    <!-- - We specified the colour manually (but still need to enter a name) -->
    <!-- - We specified all the inertial parameters manually -->
    <link name="body">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <box size="${lenght} ${thikness} ${thikness}" />
            </geometry>
            <material name="green">
                <color rgba="0.2 1 0.2 1"/>
            </material>
        </visual>
        <collision>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <box size="2 ${thikness} ${thikness}" />
            </geometry>
        </collision>
        <inertial>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <mass value="12" />
            <inertia ixx="2.26" ixy="0.0" ixz="0.0" iyy="6.26" iyz="0.0" izz="8.5" />
        </inertial>
    </link>

    <!-- slider_joint lets slider_link move back and forth along the top of the base in one dimension.  -->
    <!-- - Origin is set to one of the top edges of the base_link box, so that our link skims across the top  -->
    <!-- - It moves along the X axis -->
    <!-- - We need to specify limits for the motion -->
    
    <joint name="front_sh" type="revolute">
        <origin xyz="${lenght/2} 0 ${-thikness/2}" rpy="0 0 0"/>
        <parent link="body"/>
        <child link="front_leg"/>
        <axis xyz="0 -1 0"/>
        <limit lower="-${pi/4}" upper="${pi/2}" velocity="100" effort="100"/> 
    </joint>

    <transmission name="front_sh_trans">
        <type>transmission_interface/SimpleTransmission</type>
        <joint name="front_sh"/>
        <actuator name="motor1">
            <mechanicalReduction>1.0</mechanicalReduction>
        </actuator>
    </transmission>

  <!-- ros2_control interface -->
  <ros2_control name="KumiHardware" type="system">
    <hardware>
      <plugin>gazebo_ros2_control/GazeboSystem</plugin>
    </hardware>
    <joint name="front_sh">
      <command_interface name="position"/>
      <state_interface name="position"/>
      <state_interface name="velocity"/>
    </joint>
  </ros2_control>

    <!-- base_link is a large rectangular plate. Some things to note: -->
    <!-- - We set the visual origin Z to half the box height, so that the link origin sits at the bottom of the box -->
    <!-- - We set the collision to be identical to the visual -->
    <!-- - We specified the colour manually (but still need to enter a name) -->
    <!-- - We specified all the inertial parameters manually -->
    <link name="front_leg">
        <visual>
            <origin xyz="${thikness/2} 0 ${-leg_len/4}" rpy="0 0 0"/>
            <geometry>
                <box size="${thikness} ${thikness} ${leg_len/2}" />
            </geometry>
            <material name="orange">
                <color rgba="1 1 1 1"/>
            </material>
        </visual>
        <collision>
            <origin xyz="${thikness/2} 0 -${leg_len/4}" rpy="0 0 0"/>
            <geometry>
                <box size="${thikness} ${thikness} ${leg_len/2}" />
            </geometry>
        </collision>
        <inertial>
            <origin xyz="${thikness/2} 0 -${leg_len/4}" rpy="0 0 0"/>
            <mass value="12" />
            <inertia ixx="2.26" ixy="0.0" ixz="0.0" iyy="6.26" iyz="0.0" izz="8.5" />
        </inertial>
    </link>

        <!-- This file is not a robot in and of itself, it just contains some useful tags that could be included in any robot -->

   

</robot>